Microsoft (R) Macro Assembler Version 6.14.8444		    05/31/23 18:08:47
Kursach.asm						     Page 1 - 1


				.386
				;Задайте объём ПЗУ в байтах
 = 1000				RomSize    EQU   4096

 = 00FD				SumPort = 0FDh ; 2
 = 00FE				SumPowerPort = 0FEh ; 1
 = 00FD				CntPort = 0FDh ; 2
 = 00FC				CntPowerPort = 0FCh ; 3
 = 00F7				KbdPort = 0F7h ; 0
 = 00FB				IndPort = 0FBh ; 4
 = 00FE				ControlPort = 0FEh ; 1

 = 0046				NMax = 70

 0000				IntTable   SEGMENT use16 AT 0
				;Здесь размещаются адреса обработчиков прерываний
 0000				IntTable   ENDS

 0000				Data       SEGMENT use16 AT 40h
				;Здесь размещаются описания переменных
 0000  000A [			DataHexArr db 10 dup(?) 
        00
       ]
 000A  000A [			DataHexTabl db 10 dup(?)
        00
       ]
 0014  0007 [			DataTable dd 7 dup(?)
        00000000
       ]
 0030  0005 [			ErrTable db 5 dup (?)
        00
       ]
 0035  0006 [			Res db 6 dup (?)
        00
       ]
 003B 00000000			SelectedNumber DD ?
 003F 00			OldButton db    ?
 0040 00			OldCntrl db    ?
 0041 00			StopFlag db ?
 0042 00			BrakFlag db ?
 0043 00			ErrorFlag db ?
 0044 00			SumFlag db ?
 0045 00			SbrosFlag db ?
 0046 0000			Buffer dw ?
 0048 00000000			Cnt DD ?
 004C 00000000			CntAll DD ?
 0050 00000000			CntBrak DD ?
 0054 00000000			Time DD ?
 0058 00			TimeEndFlag DB ?
 0059				Data       ENDS


				;Задайте необходимый адрес стека
 0000				Stk        SEGMENT use16 AT 2000h
				;Задайте необходимый размер стека
 0000  0010 [			           DW    16 dup (?)
        0000
       ]
 0020				StkTop     Label Word
 0020				Stk        ENDS

 0000				InitData   SEGMENT use16
 0000				InitDataStart:
				;Здесь размещаются описания констант



 0000				InitDataEnd:
 0000				InitData   ENDS

 0000				Code       SEGMENT use16
				;Здесь размещаются описания констант

				           ASSUME cs:Code,ds:Data,es:Data
						   
 0000 00 01 02 03 04 05			HexArr DB 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h
       06 07 08 09
 000A 3F 0C 76 5E 4D 5B			HexTabl DB 3Fh,0Ch,76h,5Eh,4Dh,5Bh,7Bh,0Eh,7Fh,5Fh 
       7B 0E 7F 5F
 0014 00000500 00010000			Table DD 0500h, 010000h, 020000h, 050000h, 01000000h, 02000000h, 05000000h 
       00020000 00050000
       01000000 02000000
       05000000
 0030 27 3F 27 27 73			Err DB 27h, 3fh, 27h, 27h, 73h
					
 0035				Initialization PROC NEAR
 0035  33 C0						xor ax, ax
 0037  C6 06 0041 R 01					mov StopFlag, 01h
 003C  C6 06 0042 R 00					mov BrakFlag, 00h
 0041  C6 06 0043 R 00					mov ErrorFlag, 00h
 0046  C6 06 0044 R 00					mov SumFlag, 00h
 004B  C6 06 0045 R 00					mov SbrosFlag, 00h
 0050  A3 0048 R					mov word ptr Cnt, ax
 0053  A3 004A R					mov word ptr Cnt+2, ax
 0056  A3 004C R					mov word ptr CntAll, ax
 0059  A3 004E R					mov word ptr CntAll+2, ax
 005C  A3 0050 R					mov word ptr CntBrak, ax
 005F  A3 0052 R					mov word ptr CntBrak+2, ax
 0062  A2 003F R					mov OldButton, al
 0065  A2 0040 R					mov OldCntrl, al
 0068  A3 0035 R			        mov word ptr Res, ax
 006B  A3 0037 R					mov word ptr Res+2, ax
 006E  A3 0039 R					mov word ptr Res+4, ax
 0071  A3 003B R					mov word ptr SelectedNumber, ax
 0074  A3 003D R					mov word ptr SelectedNumber+2, ax
 0077  C6 06 0058 R FF					mov TimeEndFlag, 0FFh
 007C  C7 06 0046 R 0100				mov Buffer, 0100h
 0082  A1 0046 R					mov ax, Buffer
 0085  8A C4						mov al, ah
 0087  E6 FB						out IndPort, al
 0089  33 C0						xor ax, ax
 008B  C3						RET
 008C				Initialization ENDP

 008C				Simul PROC NEAR
 008C  8B C8						MOV CX, AX
 008E  A1 0046 R					MOV AX, Buffer
							
 0091  80 3E 0041 R 01					cmp StopFlag, 01h
 0096  74 4B						je Timer1
 0098  80 3E 0043 R 01					cmp ErrorFlag, 01h
 009D  74 44						je Timer1
 009F  EB 1E						jmp Timer2
						
 00A1				Timer0:	; Таймер
 00A1  83 2E 0054 R 01					SUB word ptr Time, 1
 00A6  83 1E 0056 R 00					SBB word ptr Time+2, 0
 00AB  8B 36 0054 R					MOV SI, word ptr Time
 00AF  0B 36 0056 R					OR SI, word ptr Time+2
 00B3  C6 06 0058 R 00					MOV TimeEndFlag, 0
 00B8  75 29						JNZ Timer1
 00BA  C6 06 0058 R FF					MOV TimeEndFlag, 0FFh
						
 00BF  8A C4			Timer2:		MOV AL,AH
 00C1  80 3E 0058 R FF					CMP TimeEndFlag, 0FFh
 00C6  75 D9						JNZ Timer0
						
 00C8  E6 FB						Out IndPort, AL
 00CA  3C 80						cmp AL, 80h
 00CC  75 05						jne Timer3
 00CE  C6 06 0044 R 01					mov SumFlag, 01h
 00D3  D0 C4			Timer3:		ROL AH, 1
							
 00D5  C7 06 0054 R 0050				MOV word ptr Time, 0050h
 00DB  C7 06 0056 R 0000				MOV word ptr Time+2, 0000h
 00E1  EB BE						JMP Timer0	
 00E3  A3 0046 R		Timer1: 	MOV Buffer, AX
 00E6  8B C1						MOV AX, CX
 00E8  C3						ret
 00E9				Simul ENDP 

 00E9				ReadInput  	PROC  Near 
 00E9  32 E4						xor ah, ah
 00EB  BA 00FE						mov dx, ControlPort
 00EE  EC						in al, dx		
 00EF  E8 0248						call VibrDestr
 00F2  32 E4						xor ah, ah
 00F4  3A 06 0040 R					cmp al, OldCntrl
 00F8  75 12						jne m3 
							
 00FA				m6:		   	; Пишу кнопку сброса снизу
 00FA  80 3E 0045 R 01					cmp SbrosFlag, 01h
 00FF  0F 84 0083					je m1
 0103  80 3E 0043 R 01					cmp ErrorFlag, 01h
 0108  74 7C						je m1
							
 010A  EB 2F						jmp m4

						   
 010C  A2 0040 R		m3:        	mov OldCntrl, al
 010F  3C FF						cmp al, 0ffh
 0111  74 E7						je m6
							
 0113  FE C4			m5:		   	inc   ah
 0115  D0 E8						shr   al, 1
 0117  72 FA						jc m5
 0119  FE CC						dec ah
							
 011B  80 FC 03						cmp ah, 03h
 011E  75 05						jne NoSbros
 0120  C6 06 0045 R 01					mov SbrosFlag, 01h
 0125  80 FC 02			NoSbros:	cmp ah, 02h
 0128  72 09						jb m11
 012A  80 36 0042 R 01					xor BrakFlag, 01h
 012F  32 E4						xor ah, ah
 0131  EB C7						jmp m6
						   
 0133  88 26 0041 R		m11:	   	mov StopFlag, ah
 0137  32 E4						xor ah, ah
 0139  EB BF						jmp m6
						   
 013B  BA 00F7			m4:		   	mov dx, KbdPort
 013E  EC						in al, dx		
 013F  E8 01F8						call VibrDestr
 0142  32 E4						xor ah, ah
 0144  3A 06 003F R					cmp al, OldButton
 0148  74 3C						je m1
 014A  A2 003F R					mov OldButton, al
 014D  3C FF						cmp   al, 0ffh
 014F  74 35						je    m1   ;Если нет символов для добавления (не нажата ни одна из кнопок)
 0151				m2:       
 0151  FE C4						inc   ah
 0153  D0 E8						shr   al, 1
 0155  72 FA						jc m2
 0157  FE CC						dec ah
				           
 0159  32 C0						xor al, al
 015B  8D 1E 0014 R					lea BX, Table
 015F  C0 E4 02						shl ah, 2
 0162  02 C4						add al, ah
 0164  D7						xlat
 0165  A2 003B R					mov byte ptr SelectedNumber, al 
 0168  8D 1E 0015 R					lea BX, Table+1
 016C  02 C4						add al, ah
 016E  D7						xlat
 016F  A2 003C R					mov byte ptr SelectedNumber+1, al  
 0172  8D 1E 0016 R					lea BX, Table+2
 0176  02 C4						add al, ah
 0178  D7						xlat
 0179  A2 003D R					mov byte ptr SelectedNumber+2, al  
 017C  8D 1E 0017 R					lea BX, Table+3
 0180  02 C4						add al, ah
 0182  D7						xlat
 0183  A2 003E R					mov byte ptr SelectedNumber+3, al  		   
 0186  C3			m1:		   	RET           
 0187				ReadInput  	ENDP

 0187				AddCntAll  	PROC Near
 0187  80 3E 004E R 01					cmp byte ptr CntAll+2, 01h
 018C  75 0A						jne Cnt1
 018E  C6 06 0043 R 01					mov ErrorFlag, 01h
 0193  C6 06 0041 R 01					mov StopFlag, 01h
 0198  A1 004C R		Cnt1:		mov ax, word ptr CntAll
 019B  40						inc ax
 019C  37						AAA
 019D  A3 004C R					mov word ptr CntAll, ax
 01A0  80 3E 004D R 09					CMP byte ptr CntAll+1, 09h
 01A5  76 0A						JBE CntRet 
 01A7  C6 06 004D R 00					mov byte ptr CntAll+1, 00h
 01AC  C6 06 004E R 01					mov byte ptr CntAll+2, 01h
 01B1  C3			CntRet:		ret
 01B2				AddCntAll  	ENDP

 01B2				AccumulationSumm PROC Near
 01B2  80 3E 0045 R 01					cmp SbrosFlag, 01h
 01B7  0F 84 00B4					je M7
 01BB  80 3E 0043 R 01					cmp ErrorFlag, 01h
 01C0  0F 84 00AB					je M7
 01C4  80 3E 0041 R 01				    cmp StopFlag, 01h
 01C9  0F 84 00A2					je M7
 01CD  80 3E 0044 R 00					cmp SumFlag, 00h
 01D2  0F 84 0099					je M7
							
 01D6  33 C0						xor ax,ax
 01D8  80 3E 0042 R 01					cmp BrakFlag, 01h
 01DD  74 6F						je M10
 01DF  83 3E 003D R 00					cmp word ptr SelectedNumber+2, 0
 01E4  75 09						JNZ M8
 01E6  83 3E 003B R 00					cmp word ptr SelectedNumber, 0
 01EB  0F 84 0080					JZ M7

						
 01EF  E8 FF95			M8:			call AddCntAll
 01F2  A1 0048 R					mov ax, word ptr Cnt
 01F5  40						inc ax
 01F6  37						AAA
 01F7  A3 0048 R					mov word ptr Cnt, ax
 01FA  80 3E 0049 R 09					CMP byte ptr Cnt+1, 09h
 01FF  76 0A						JBE M9 
 0201  C6 06 0049 R 00					mov byte ptr Cnt+1, 00h
 0206  C6 06 004A R 01					mov byte ptr Cnt+2, 01h
							
 020B  C6 06 0044 R 00		M9:			mov SumFlag, 00h
 0210  A1 0035 R					mov ax, word ptr Res
 0213  02 06 003B R					ADD al, byte ptr SelectedNumber
 0217  37						AAA
 0218  A3 0035 R					mov word ptr Res, ax

							
 021B  A1 0036 R					mov ax, word ptr Res+1
 021E  02 06 003C R					ADD al, byte ptr SelectedNumber+1
 0222  37						AAA
 0223  A3 0036 R					mov word ptr Res+1, ax

							
 0226  A1 0037 R					mov ax, word ptr Res+2
 0229  02 06 003D R					ADD al, byte ptr SelectedNumber+2
 022D  37						AAA
 022E  A3 0037 R					mov word ptr Res+2, ax

							
 0231  A1 0038 R					mov ax, word ptr Res+3
 0234  02 06 003E R					ADD al, byte ptr SelectedNumber+3
 0238  37						AAA
 0239  A3 0038 R					mov word ptr Res+3, ax

 023C  80 3E 0039 R 09					CMP Res+4, 09h
 0241  76 2C						JBE M7
 0243  C6 06 0039 R 00					mov Res+4, 0h
 0248  FE 06 003A R					INC [Res+5]
 024C  EB 21						JMP M7
							
 024E  E8 FF36			M10:		call AddCntAll
 0251  C6 06 0044 R 00					mov SumFlag, 00h
 0256  A1 0050 R					mov ax, word ptr CntBrak
 0259  40						inc ax
 025A  37						AAA
 025B  A3 0050 R					mov word ptr CntBrak, ax
 025E  80 3E 0051 R 09					CMP byte ptr CntBrak+1, 09h
 0263  76 0A						JBE M7 
 0265  C6 06 0051 R 00					mov byte ptr CntBrak+1, 00h
 026A  C6 06 0052 R 01					mov byte ptr CntBrak+2, 01h
							
 026F  8B 2E 003B R		M7:			mov bp, word ptr SelectedNumber
 0273  81 E5 00FF					and bp, 00FFh
 0277  C3						ret
 0278				AccumulationSumm ENDP


 0278				SumOut     PROC NEAR  			;Выводим сумму на индикаторы
 0278  80 3E 0043 R 01					cmp ErrorFlag, 01h
 027D  74 29						je SumOutRet
							
 027F  33 C9						xor cx, cx
 0281  B1 01						mov cl, 01h
 0283  8D 1E 000A R		            lea   bx, DataHexTabl 
 0287  8D 36 0035 R					lea SI, Res
 028B  8A 24			SumOut1:	mov ah, [SI]
 028D  8A C4						mov al, ah
 028F  D7						xlat
 0290  F6 D0						not al					;табличное преобразование
 0292  E6 FD						out SumPort, al			;выводим на индикатор
 0294  8A C1						mov al, cl
 0296  E6 FE						out SumPowerPort, al	;зажигаем индикатор
 0298  B0 00						mov al,00h
 029A  E6 FE						out SumPowerPort, al	;гасим индикатор
 029C  D0 E1						shl cl, 1
 029E  46						inc SI
 029F  80 F9 20						cmp cl, 20h
 02A2  76 E7						jbe SumOut1
 02A4  32 E4					    xor ah, ah
 02A6  33 C9						xor cx, cx
 02A8  C3			SumOutRet:  ret
 02A9				SumOut      ENDP

 02A9				CntOut 	    PROC NEAR
 02A9  33 C9						xor cx, cx
 02AB  B1 01						mov cl, 01h
 02AD  8D 1E 000A R					lea   bx, DataHexTabl
 02B1  8D 36 0048 R					lea SI, byte ptr Cnt
 02B5  8A 24			CntOut1:	mov ah, [SI]
 02B7  8A C4						mov al, ah
 02B9  D7						xlat
 02BA  F6 D0						not al				;табличное преобразование
 02BC  E6 FD						out CntPort, al		;выводим на индикатор
 02BE  8A C1						mov al, cl
 02C0  E6 FC						out CntPowerPort, al	;зажигаем индикатор 
 02C2  B0 00						mov al,00h
 02C4  E6 FC						out CntPowerPort, al	;гасим индикатор
 02C6  D0 E1						shl cl, 1
 02C8  46						inc SI
 02C9  80 F9 04						cmp cl, 04h
 02CC  76 E7						jbe CntOut1
 02CE  32 E4						xor ah, ah
 02D0  33 C9						xor cx, cx
							
 02D2  B1 08						mov cl, 08h
 02D4  8D 1E 000A R					lea   bx, DataHexTabl
 02D8  8D 36 0050 R					lea SI, byte ptr CntBrak
 02DC  8A 24			CntOut2:	mov ah, [SI]
 02DE  8A C4						mov al, ah
 02E0  D7						xlat
 02E1  F6 D0						not al					;табличное преобразование
 02E3  E6 FD						out CntPort, al			;выводим на индикатор
 02E5  8A C1						mov al, cl
 02E7  E6 FC						out CntPowerPort, al	;зажигаем индикатор 
 02E9  B0 00						mov al,00h
 02EB  E6 FC						out CntPowerPort, al	;гасим индикатор
 02ED  D0 E1						shl cl, 1
 02EF  46						inc SI
 02F0  80 F9 20						cmp cl, 20h
 02F3  76 E7						jbe CntOut2
 02F5  32 E4						xor ah, ah
 02F7  33 C9						xor cx, cx
 02F9  C3						ret
 02FA				CntOut 	   ENDP

 02FA				ErrorOut Proc Near
 02FA  80 3E 0043 R 00					cmp ErrorFlag, 00h
 02FF  74 2A						je ErrorRet
							
 0301  32 C0						xor al, al
 0303  32 DB						xor bl, bl
							
 0305  8D 1E 0030 R					lea bx, ErrTable
							;xor bl, bl
 0309  32 D2						xor dl, dl
 030B  B1 02						mov cl, 02h
							
 030D  8A C2			ErrorOut1:	mov al, dl
 030F  D7			            xlat
 0310  F6 D0					    not al				 ;табличное преобразование
 0312  E6 FD			            out   SumPort, al    ;выводим на индикатор
 0314  8A C1			            mov   al, cl            
 0316  E6 FE			            out   SumPowerPort, al    ;зажигаем индикатор    
 0318  B0 00			            mov   al,00h             
 031A  E6 FE			            out   SumPowerPort, al    ;гасим индикатор
 031C  D0 E1						shl cl, 1
 031E  FE C2						inc dl
 0320  80 F9 20						cmp cl, 20h
 0323  76 E8						jbe ErrorOut1
 0325  32 E4						xor ah, ah
 0327  33 C9						xor cx, cx
 0329  32 D2						xor dl, dl
							
 032B  C3			ErrorRet:	ret
 032C				ErrorOut ENDP

 032C				Sbros PROC NEAR
 032C  80 3E 0045 R 00					cmp SbrosFlag, 00h
 0331  74 06						je SbrosRet
 0333  E8 FCFF						call Initialization
 0336  E8 0014						call CopyArr
 0339  C3			SbrosRet:	ret
 033A				Sbros ENDP

 033A				VibrDestr  PROC  NEAR
 033A  8A E0			VD1:       mov   ah,al       ;Сохранение исходного состояния
 033C  B5 00			           mov   ch,0        ;Сброс счётчика повторений
 033E  EC			VD2:       in    al,dx       ;Ввод текущего состояния
 033F  38 C4			           cmp   ah,al       ;Текущее состояние=исходному?
 0341  75 F7			           jne   VD1         ;Переход, если нет
 0343  FE C5			           inc   ch          ;Инкремент счётчика повторений
 0345  80 FD 46			           cmp   ch,NMax     ;Конец дребезга?
 0348  75 F4			           jne   VD2         ;Переход, если нет
 034A  8A C4			           mov   al,ah       ;Восстановление местоположения данных
 034C  C3			           ret
 034D				VibrDestr  ENDP

 034D				CopyArr PROC NEAR
 034D  B9 000A						MOV CX, 10 ;Загрузка счётчика циклов
 0350  8D 1E 0000 R					LEA BX, HexArr ;Загрузка адреса массива цифр
 0354  8D 2E 000A R					LEA BP, HexTabl ;Загрузка адреса таблицы преобразования
 0358  8D 3E 0000 R					LEA DI, DataHexArr ;Загрузка адреса массива цифр в сегменте данных
 035C  8D 36 000A R					LEA SI, DataHexTabl ;Загрузка адреса таблицы преобразования в сегменте данных
 0360				CopyArr0:
 0360  2E: 8A 07					MOV AL, CS:[BX] ;Чтение цифры из массива в аккумулятор
 0363  88 05						MOV [DI], AL ;Запись цифры в сегмент данных/DataHexArr
 0365  43						INC BX ;Модификация адреса HexArr
 0366  47						INC DI ;Модификация адреса DataHexArr
 0367  E2 F7						LOOP CopyArr0
							
 0369  B9 000A						MOV CX, 10 ;Загрузка счётчика циклов
 036C				CopyArr1:
 036C  2E: 8A 66 00					MOV AH, CS:[BP] ;Чтение графического образа из таблицы преобразования
 0370  88 24						MOV [SI], AH ;Запись графического образа в сегмент данных/DataHexTabl
 0372  45						INC BP ;Модификация адреса HexTabl
 0373  46						INC SI ;Модификация адреса DataHexTabl
 0374  E2 F6						LOOP CopyArr1
							
 0376  B9 000E						MOV CX, 14 ;Загрузка счётчика циклов
 0379  8D 2E 0014 R					LEA BP, Table ;Загрузка адреса таблицы преобразования
 037D  8D 36 0014 R					LEA SI, DataTable ;Загрузка адреса таблицы преобразования в сегменте данных
 0381				CopyArr2:
 0381  2E: 8A 66 00					MOV AH, CS:[BP] ;Чтение графического образа из таблицы преобразования
 0385  88 24						MOV [SI], AH ;Запись графического образа в сегмент данных/DataTable
 0387  2E: 8A 46 01					MOV AL, CS:[BP+1] ;Чтение графического образа из таблицы преобразования
 038B  88 44 01						MOV [SI+1], AL ;Запись графического образа в сегмент данных/DataTable
 038E  45						INC BP ;Модификация адреса Table
 038F  46						INC SI ;Модификация адреса DataTable
 0390  45						INC BP ;Модификация адреса Table
 0391  46						INC SI ;Модификация адреса DataTable
 0392  E2 ED						LOOP CopyArr2
							
 0394  B9 0004						MOV CX, 4 ;Загрузка счётчика циклов
 0397  8D 2E 0030 R					LEA BP, Err ;Загрузка адреса таблицы преобразования
 039B  8D 36 0030 R					LEA SI, ErrTable ;Загрузка адреса таблицы преобразования в сегменте данных
 039F				CopyArr3:
 039F  2E: 8A 66 00					MOV AH, CS:[BP] ;Чтение графического образа из таблицы преобразования
 03A3  88 24						MOV [SI], AH ;Запись графического образа в сегмент данных/DataTable
 03A5  2E: 8A 46 01					MOV AL, CS:[BP+1] ;Чтение графического образа из таблицы преобразования
 03A9  88 44 01						MOV [SI+1], AL ;Запись графического образа в сегмент данных/DataTable
 03AC  45						INC BP ;Модификация адреса Err
 03AD  46						INC SI ;Модификация адреса ErrTable
 03AE  E2 EF						LOOP CopyArr3
 03B0  33 ED						xor bp,bp
 03B2  33 C9						xor cx, cx
 03B4  C3						ret
 03B5				CopyArr ENDP

 03B5				Start:
 03B5  B8 ---- R					mov   ax,Data
 03B8  8E D8						mov   ds,ax
 03BA  8E C0						mov   es,ax
 03BC  B8 ---- R					mov   ax,Stk
 03BF  8E D0						mov   ss,ax
 03C1  8D 26 0020 R					lea   sp,StkTop
						   
 03C5  E8 FC6D						call Initialization
 03C8  E8 FF82						call CopyArr
						   
 03CB				MainLoop:  ;call KeyRead
 03CB  E8 FD1B						call ReadInput
 03CE  E8 FCBB						call Simul
 03D1  E8 FDDE						call AccumulationSumm
 03D4  E8 FEA1						call SumOut
 03D7  E8 FECF						call CntOut
 03DA  E8 FF1D						call ErrorOut
 03DD  E8 FF4C						call Sbros
 03E0  EB E9						jmp MainLoop
				;Здесь размещается код программы


				;В следующей строке необходимо указать смещение стартовой точки
							org   RomSize-16-((InitDataEnd-InitDataStart+15) AND 0FFF0h)
							ASSUME cs:NOTHING
 0FF0  EA ---- 03B5 R					jmp   Far Ptr Start
 0FF5				Code       	ENDS
				END		Start
Microsoft (R) Macro Assembler Version 6.14.8444		    05/31/23 18:08:47
Kursach.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

Code . . . . . . . . . . . . . .	16 Bit	 0FF5	  Para	  Private 
Data . . . . . . . . . . . . . .	16 Bit	 0059	  Abs	  Private 
InitData . . . . . . . . . . . .	16 Bit	 0000	  Para	  Private 
IntTable . . . . . . . . . . . .	16 Bit	 0000	  Abs	  Private 
Stk  . . . . . . . . . . . . . .	16 Bit	 0020	  Abs	  Private 


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

AccumulationSumm . . . . . . . .	P Near	 01B2	  Code	Length= 00C6 Public
  M8 . . . . . . . . . . . . . .	L Near	 01EF	  Code	
  M9 . . . . . . . . . . . . . .	L Near	 020B	  Code	
  M10  . . . . . . . . . . . . .	L Near	 024E	  Code	
  M7 . . . . . . . . . . . . . .	L Near	 026F	  Code	
AddCntAll  . . . . . . . . . . .	P Near	 0187	  Code	Length= 002B Public
  Cnt1 . . . . . . . . . . . . .	L Near	 0198	  Code	
  CntRet . . . . . . . . . . . .	L Near	 01B1	  Code	
CntOut . . . . . . . . . . . . .	P Near	 02A9	  Code	Length= 0051 Public
  CntOut1  . . . . . . . . . . .	L Near	 02B5	  Code	
  CntOut2  . . . . . . . . . . .	L Near	 02DC	  Code	
CopyArr  . . . . . . . . . . . .	P Near	 034D	  Code	Length= 0068 Public
  CopyArr0 . . . . . . . . . . .	L Near	 0360	  Code	
  CopyArr1 . . . . . . . . . . .	L Near	 036C	  Code	
  CopyArr2 . . . . . . . . . . .	L Near	 0381	  Code	
  CopyArr3 . . . . . . . . . . .	L Near	 039F	  Code	
ErrorOut . . . . . . . . . . . .	P Near	 02FA	  Code	Length= 0032 Public
  ErrorOut1  . . . . . . . . . .	L Near	 030D	  Code	
  ErrorRet . . . . . . . . . . .	L Near	 032B	  Code	
Initialization . . . . . . . . .	P Near	 0035	  Code	Length= 0057 Public
ReadInput  . . . . . . . . . . .	P Near	 00E9	  Code	Length= 009E Public
  m6 . . . . . . . . . . . . . .	L Near	 00FA	  Code	
  m3 . . . . . . . . . . . . . .	L Near	 010C	  Code	
  m5 . . . . . . . . . . . . . .	L Near	 0113	  Code	
  NoSbros  . . . . . . . . . . .	L Near	 0125	  Code	
  m11  . . . . . . . . . . . . .	L Near	 0133	  Code	
  m4 . . . . . . . . . . . . . .	L Near	 013B	  Code	
  m2 . . . . . . . . . . . . . .	L Near	 0151	  Code	
  m1 . . . . . . . . . . . . . .	L Near	 0186	  Code	
Sbros  . . . . . . . . . . . . .	P Near	 032C	  Code	Length= 000E Public
  SbrosRet . . . . . . . . . . .	L Near	 0339	  Code	
Simul  . . . . . . . . . . . . .	P Near	 008C	  Code	Length= 005D Public
  Timer0 . . . . . . . . . . . .	L Near	 00A1	  Code	
  Timer2 . . . . . . . . . . . .	L Near	 00BF	  Code	
  Timer3 . . . . . . . . . . . .	L Near	 00D3	  Code	
  Timer1 . . . . . . . . . . . .	L Near	 00E3	  Code	
SumOut . . . . . . . . . . . . .	P Near	 0278	  Code	Length= 0031 Public
  SumOut1  . . . . . . . . . . .	L Near	 028B	  Code	
  SumOutRet  . . . . . . . . . .	L Near	 02A8	  Code	
VibrDestr  . . . . . . . . . . .	P Near	 033A	  Code	Length= 0013 Public
  VD1  . . . . . . . . . . . . .	L Near	 033A	  Code	
  VD2  . . . . . . . . . . . . .	L Near	 033E	  Code	


Symbols:

                N a m e                 Type     Value    Attr

BrakFlag . . . . . . . . . . . .	Byte	 0042	  Data	
Buffer . . . . . . . . . . . . .	Word	 0046	  Data	
CntAll . . . . . . . . . . . . .	DWord	 004C	  Data	
CntBrak  . . . . . . . . . . . .	DWord	 0050	  Data	
CntPort  . . . . . . . . . . . .	Number	 00FDh	 
CntPowerPort . . . . . . . . . .	Number	 00FCh	 
Cnt  . . . . . . . . . . . . . .	DWord	 0048	  Data	
ControlPort  . . . . . . . . . .	Number	 00FEh	 
DataHexArr . . . . . . . . . . .	Byte	 0000	  Data	
DataHexTabl  . . . . . . . . . .	Byte	 000A	  Data	
DataTable  . . . . . . . . . . .	DWord	 0014	  Data	
ErrTable . . . . . . . . . . . .	Byte	 0030	  Data	
ErrorFlag  . . . . . . . . . . .	Byte	 0043	  Data	
Err  . . . . . . . . . . . . . .	Byte	 0030	  Code	
HexArr . . . . . . . . . . . . .	Byte	 0000	  Code	
HexTabl  . . . . . . . . . . . .	Byte	 000A	  Code	
IndPort  . . . . . . . . . . . .	Number	 00FBh	 
InitDataEnd  . . . . . . . . . .	L Near	 0000	  InitData	
InitDataStart  . . . . . . . . .	L Near	 0000	  InitData	
KbdPort  . . . . . . . . . . . .	Number	 00F7h	 
MainLoop . . . . . . . . . . . .	L Near	 03CB	  Code	
NMax . . . . . . . . . . . . . .	Number	 0046h	 
OldButton  . . . . . . . . . . .	Byte	 003F	  Data	
OldCntrl . . . . . . . . . . . .	Byte	 0040	  Data	
Res  . . . . . . . . . . . . . .	Byte	 0035	  Data	
RomSize  . . . . . . . . . . . .	Number	 1000h	 
SbrosFlag  . . . . . . . . . . .	Byte	 0045	  Data	
SelectedNumber . . . . . . . . .	DWord	 003B	  Data	
Start  . . . . . . . . . . . . .	L Near	 03B5	  Code	
StkTop . . . . . . . . . . . . .	Word	 0020	  Stk	
StopFlag . . . . . . . . . . . .	Byte	 0041	  Data	
SumFlag  . . . . . . . . . . . .	Byte	 0044	  Data	
SumPort  . . . . . . . . . . . .	Number	 00FDh	 
SumPowerPort . . . . . . . . . .	Number	 00FEh	 
Table  . . . . . . . . . . . . .	DWord	 0014	  Code	
TimeEndFlag  . . . . . . . . . .	Byte	 0058	  Data	
Time . . . . . . . . . . . . . .	DWord	 0054	  Data	

	   0 Warnings
	   0 Errors
